// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	models "userbalance/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockControl is a mock of Control interface.
type MockControl struct {
	ctrl     *gomock.Controller
	recorder *MockControlMockRecorder
}

// MockControlMockRecorder is the mock recorder for MockControl.
type MockControlMockRecorder struct {
	mock *MockControl
}

// NewMockControl creates a new mock instance.
func NewMockControl(ctrl *gomock.Controller) *MockControl {
	mock := &MockControl{ctrl: ctrl}
	mock.recorder = &MockControlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControl) EXPECT() *MockControlMockRecorder {
	return m.recorder
}

// CancelReservation mocks base method.
func (m *MockControl) CancelReservation(transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReservation", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelReservation indicates an expected call of CancelReservation.
func (mr *MockControlMockRecorder) CancelReservation(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReservation", reflect.TypeOf((*MockControl)(nil).CancelReservation), transaction)
}

// Confirmation mocks base method.
func (m *MockControl) Confirmation(transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirmation", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Confirmation indicates an expected call of Confirmation.
func (mr *MockControlMockRecorder) Confirmation(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirmation", reflect.TypeOf((*MockControl)(nil).Confirmation), transaction)
}

// CreateReport mocks base method.
func (m *MockControl) CreateReport(requestReport *models.RequestReport) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReport", requestReport)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReport indicates an expected call of CreateReport.
func (mr *MockControlMockRecorder) CreateReport(requestReport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReport", reflect.TypeOf((*MockControl)(nil).CreateReport), requestReport)
}

// GetBalance mocks base method.
func (m *MockControl) GetBalance(userId int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", userId)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockControlMockRecorder) GetBalance(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockControl)(nil).GetBalance), userId)
}

// GetHistory mocks base method.
func (m *MockControl) GetHistory(requestHistory *models.RequestHistory) ([]models.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", requestHistory)
	ret0, _ := ret[0].([]models.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockControlMockRecorder) GetHistory(requestHistory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockControl)(nil).GetHistory), requestHistory)
}

// ReplenishmentBalance mocks base method.
func (m *MockControl) ReplenishmentBalance(transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplenishmentBalance", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplenishmentBalance indicates an expected call of ReplenishmentBalance.
func (mr *MockControlMockRecorder) ReplenishmentBalance(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplenishmentBalance", reflect.TypeOf((*MockControl)(nil).ReplenishmentBalance), transaction)
}

// Reservation mocks base method.
func (m *MockControl) Reservation(transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reservation", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reservation indicates an expected call of Reservation.
func (mr *MockControlMockRecorder) Reservation(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reservation", reflect.TypeOf((*MockControl)(nil).Reservation), transaction)
}

// Transfer mocks base method.
func (m *MockControl) Transfer(money *models.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", money)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockControlMockRecorder) Transfer(money interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockControl)(nil).Transfer), money)
}
