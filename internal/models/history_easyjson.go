// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson40eb0d12DecodeUserbalanceInternalModels(in *jlexer.Lexer, out *RequestHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userid":
			out.UserID = int(in.Int())
		case "sortfield":
			out.SortField = string(in.String())
		case "direction":
			out.Direction = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson40eb0d12EncodeUserbalanceInternalModels(out *jwriter.Writer, in RequestHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"sortfield\":"
		out.RawString(prefix)
		out.String(string(in.SortField))
	}
	{
		const prefix string = ",\"direction\":"
		out.RawString(prefix)
		out.String(string(in.Direction))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson40eb0d12EncodeUserbalanceInternalModels(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson40eb0d12DecodeUserbalanceInternalModels(l, v)
}
func easyjson40eb0d12DecodeUserbalanceInternalModels1(in *jlexer.Lexer, out *History) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "amount":
			out.Amount = int(in.Int())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson40eb0d12EncodeUserbalanceInternalModels1(out *jwriter.Writer, in History) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v History) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson40eb0d12EncodeUserbalanceInternalModels1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *History) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson40eb0d12DecodeUserbalanceInternalModels1(l, v)
}
func easyjson40eb0d12DecodeUserbalanceInternalModels2(in *jlexer.Lexer, out *Histories) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entity":
			if in.IsNull() {
				in.Skip()
				out.Entity = nil
			} else {
				in.Delim('[')
				if out.Entity == nil {
					if !in.IsDelim(']') {
						out.Entity = make([]History, 0, 1)
					} else {
						out.Entity = []History{}
					}
				} else {
					out.Entity = (out.Entity)[:0]
				}
				for !in.IsDelim(']') {
					var v1 History
					(v1).UnmarshalEasyJSON(in)
					out.Entity = append(out.Entity, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson40eb0d12EncodeUserbalanceInternalModels2(out *jwriter.Writer, in Histories) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"entity\":"
		out.RawString(prefix[1:])
		if in.Entity == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Entity {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Histories) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson40eb0d12EncodeUserbalanceInternalModels2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Histories) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson40eb0d12DecodeUserbalanceInternalModels2(l, v)
}
