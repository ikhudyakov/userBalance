// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson461f4b12DecodeUserbalanceInternalModels(in *jlexer.Lexer, out *Transaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userid":
			out.UserID = int(in.Int())
		case "amount":
			out.Amount = int(in.Int())
		case "date":
			out.Date = string(in.String())
		case "serviceid":
			out.ServiceID = int(in.Int())
		case "orderid":
			out.OrderID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeUserbalanceInternalModels(out *jwriter.Writer, in Transaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"serviceid\":"
		out.RawString(prefix)
		out.Int(int(in.ServiceID))
	}
	{
		const prefix string = ",\"orderid\":"
		out.RawString(prefix)
		out.Int(int(in.OrderID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeUserbalanceInternalModels(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeUserbalanceInternalModels(l, v)
}
func easyjson461f4b12DecodeUserbalanceInternalModels1(in *jlexer.Lexer, out *Replenishment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userid":
			out.UserID = int(in.Int())
		case "amount":
			out.Amount = int(in.Int())
		case "date":
			out.Date = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeUserbalanceInternalModels1(out *jwriter.Writer, in Replenishment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Replenishment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeUserbalanceInternalModels1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Replenishment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeUserbalanceInternalModels1(l, v)
}
func easyjson461f4b12DecodeUserbalanceInternalModels2(in *jlexer.Lexer, out *Money) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fromuserid":
			out.FromUserID = int(in.Int())
		case "touserid":
			out.ToUserID = int(in.Int())
		case "amount":
			out.Amount = int(in.Int())
		case "date":
			out.Date = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeUserbalanceInternalModels2(out *jwriter.Writer, in Money) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fromuserid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.FromUserID))
	}
	{
		const prefix string = ",\"touserid\":"
		out.RawString(prefix)
		out.Int(int(in.ToUserID))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Money) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeUserbalanceInternalModels2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Money) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeUserbalanceInternalModels2(l, v)
}
