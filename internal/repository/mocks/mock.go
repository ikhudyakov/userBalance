// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	sql "database/sql"
	reflect "reflect"
	models "userbalance/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockControl is a mock of Control interface.
type MockControl struct {
	ctrl     *gomock.Controller
	recorder *MockControlMockRecorder
}

// MockControlMockRecorder is the mock recorder for MockControl.
type MockControlMockRecorder struct {
	mock *MockControl
}

// NewMockControl creates a new mock instance.
func NewMockControl(ctrl *gomock.Controller) *MockControl {
	mock := &MockControl{ctrl: ctrl}
	mock.recorder = &MockControlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControl) EXPECT() *MockControlMockRecorder {
	return m.recorder
}

// DeleteMoneyReserveDetailsTx mocks base method.
func (m *MockControl) DeleteMoneyReserveDetailsTx(tx *sql.Tx, userId, serviceId, orderId, amount int, date string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMoneyReserveDetailsTx", tx, userId, serviceId, orderId, amount, date)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMoneyReserveDetailsTx indicates an expected call of DeleteMoneyReserveDetailsTx.
func (mr *MockControlMockRecorder) DeleteMoneyReserveDetailsTx(tx, userId, serviceId, orderId, amount, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMoneyReserveDetailsTx", reflect.TypeOf((*MockControl)(nil).DeleteMoneyReserveDetailsTx), tx, userId, serviceId, orderId, amount, date)
}

// GetBalanceReserveAccounts mocks base method.
func (m *MockControl) GetBalanceReserveAccounts(userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceReserveAccounts", userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceReserveAccounts indicates an expected call of GetBalanceReserveAccounts.
func (mr *MockControlMockRecorder) GetBalanceReserveAccounts(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceReserveAccounts", reflect.TypeOf((*MockControl)(nil).GetBalanceReserveAccounts), userId)
}

// GetDB mocks base method.
func (m *MockControl) GetDB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockControlMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockControl)(nil).GetDB))
}

// GetHistory mocks base method.
func (m *MockControl) GetHistory(userId int) ([]models.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", userId)
	ret0, _ := ret[0].([]models.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockControlMockRecorder) GetHistory(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockControl)(nil).GetHistory), userId)
}

// GetReport mocks base method.
func (m *MockControl) GetReport(fromDate, toDate string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", fromDate, toDate)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockControlMockRecorder) GetReport(fromDate, toDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockControl)(nil).GetReport), fromDate, toDate)
}

// GetService mocks base method.
func (m *MockControl) GetService(serviceId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", serviceId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockControlMockRecorder) GetService(serviceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockControl)(nil).GetService), serviceId)
}

// GetUser mocks base method.
func (m *MockControl) GetUser(userId int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockControlMockRecorder) GetUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockControl)(nil).GetUser), userId)
}

// InsertLogTx mocks base method.
func (m *MockControl) InsertLogTx(tx *sql.Tx, userId int, date string, amount int, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLogTx", tx, userId, date, amount, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLogTx indicates an expected call of InsertLogTx.
func (mr *MockControlMockRecorder) InsertLogTx(tx, userId, date, amount, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLogTx", reflect.TypeOf((*MockControl)(nil).InsertLogTx), tx, userId, date, amount, description)
}

// InsertMoneyReserveAccountsTx mocks base method.
func (m *MockControl) InsertMoneyReserveAccountsTx(tx *sql.Tx, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMoneyReserveAccountsTx", tx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMoneyReserveAccountsTx indicates an expected call of InsertMoneyReserveAccountsTx.
func (mr *MockControlMockRecorder) InsertMoneyReserveAccountsTx(tx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMoneyReserveAccountsTx", reflect.TypeOf((*MockControl)(nil).InsertMoneyReserveAccountsTx), tx, userId)
}

// InsertMoneyReserveDetailsTx mocks base method.
func (m *MockControl) InsertMoneyReserveDetailsTx(tx *sql.Tx, userId, serviceId, orderId, amount int, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMoneyReserveDetailsTx", tx, userId, serviceId, orderId, amount, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMoneyReserveDetailsTx indicates an expected call of InsertMoneyReserveDetailsTx.
func (mr *MockControlMockRecorder) InsertMoneyReserveDetailsTx(tx, userId, serviceId, orderId, amount, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMoneyReserveDetailsTx", reflect.TypeOf((*MockControl)(nil).InsertMoneyReserveDetailsTx), tx, userId, serviceId, orderId, amount, date)
}

// InsertReportTx mocks base method.
func (m *MockControl) InsertReportTx(tx *sql.Tx, userId, serviceId, amount int, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReportTx", tx, userId, serviceId, amount, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertReportTx indicates an expected call of InsertReportTx.
func (mr *MockControlMockRecorder) InsertReportTx(tx, userId, serviceId, amount, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReportTx", reflect.TypeOf((*MockControl)(nil).InsertReportTx), tx, userId, serviceId, amount, date)
}

// InsertUserTx mocks base method.
func (m *MockControl) InsertUserTx(tx *sql.Tx, userId, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserTx", tx, userId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserTx indicates an expected call of InsertUserTx.
func (mr *MockControlMockRecorder) InsertUserTx(tx, userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserTx", reflect.TypeOf((*MockControl)(nil).InsertUserTx), tx, userId, amount)
}

// UpdateBalanceTx mocks base method.
func (m *MockControl) UpdateBalanceTx(tx *sql.Tx, userId, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceTx", tx, userId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceTx indicates an expected call of UpdateBalanceTx.
func (mr *MockControlMockRecorder) UpdateBalanceTx(tx, userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceTx", reflect.TypeOf((*MockControl)(nil).UpdateBalanceTx), tx, userId, amount)
}

// UpdateMoneyReserveAccountsTx mocks base method.
func (m *MockControl) UpdateMoneyReserveAccountsTx(tx *sql.Tx, userId, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMoneyReserveAccountsTx", tx, userId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMoneyReserveAccountsTx indicates an expected call of UpdateMoneyReserveAccountsTx.
func (mr *MockControlMockRecorder) UpdateMoneyReserveAccountsTx(tx, userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMoneyReserveAccountsTx", reflect.TypeOf((*MockControl)(nil).UpdateMoneyReserveAccountsTx), tx, userId, amount)
}
