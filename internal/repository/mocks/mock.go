// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	models "userbalance/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockControl is a mock of Control interface.
type MockControl struct {
	ctrl     *gomock.Controller
	recorder *MockControlMockRecorder
}

// MockControlMockRecorder is the mock recorder for MockControl.
type MockControlMockRecorder struct {
	mock *MockControl
}

// NewMockControl creates a new mock instance.
func NewMockControl(ctrl *gomock.Controller) *MockControl {
	mock := &MockControl{ctrl: ctrl}
	mock.recorder = &MockControlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControl) EXPECT() *MockControlMockRecorder {
	return m.recorder
}

// CancelReservation mocks base method.
func (m *MockControl) CancelReservation(userId, serviceId, orderId, amount int, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReservation", userId, serviceId, orderId, amount, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelReservation indicates an expected call of CancelReservation.
func (mr *MockControlMockRecorder) CancelReservation(userId, serviceId, orderId, amount, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReservation", reflect.TypeOf((*MockControl)(nil).CancelReservation), userId, serviceId, orderId, amount, date)
}

// Confirmation mocks base method.
func (m *MockControl) Confirmation(userId, serviceId, orderId, amount int, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirmation", userId, serviceId, orderId, amount, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// Confirmation indicates an expected call of Confirmation.
func (mr *MockControlMockRecorder) Confirmation(userId, serviceId, orderId, amount, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirmation", reflect.TypeOf((*MockControl)(nil).Confirmation), userId, serviceId, orderId, amount, date)
}

// CreateReport mocks base method.
func (m *MockControl) CreateReport(fromDate, toDate string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReport", fromDate, toDate)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReport indicates an expected call of CreateReport.
func (mr *MockControlMockRecorder) CreateReport(fromDate, toDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReport", reflect.TypeOf((*MockControl)(nil).CreateReport), fromDate, toDate)
}

// GetBalance mocks base method.
func (m *MockControl) GetBalance(userId int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", userId)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockControlMockRecorder) GetBalance(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockControl)(nil).GetBalance), userId)
}

// GetHistory mocks base method.
func (m *MockControl) GetHistory(userId int) ([]models.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", userId)
	ret0, _ := ret[0].([]models.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockControlMockRecorder) GetHistory(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockControl)(nil).GetHistory), userId)
}

// ReplenishmentBalance mocks base method.
func (m *MockControl) ReplenishmentBalance(userId, amount int, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplenishmentBalance", userId, amount, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplenishmentBalance indicates an expected call of ReplenishmentBalance.
func (mr *MockControlMockRecorder) ReplenishmentBalance(userId, amount, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplenishmentBalance", reflect.TypeOf((*MockControl)(nil).ReplenishmentBalance), userId, amount, date)
}

// Reservation mocks base method.
func (m *MockControl) Reservation(userId, serviceId, orderId, amount int, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reservation", userId, serviceId, orderId, amount, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reservation indicates an expected call of Reservation.
func (mr *MockControlMockRecorder) Reservation(userId, serviceId, orderId, amount, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reservation", reflect.TypeOf((*MockControl)(nil).Reservation), userId, serviceId, orderId, amount, date)
}

// Transfer mocks base method.
func (m *MockControl) Transfer(fromUserId, toUserId, amount int, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", fromUserId, toUserId, amount, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockControlMockRecorder) Transfer(fromUserId, toUserId, amount, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockControl)(nil).Transfer), fromUserId, toUserId, amount, date)
}
